program.cs:-     

using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.EntityFrameworkCore;
using PropDealsNew.Data;

namespace PropDealsNew
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.
            builder.Services.AddControllersWithViews();
            // Add services to the container.

            builder.Services.AddControllersWithViews();
            builder.Services.AddDbContext<ApplicationDbContext>(options => options.UseSqlServer(
    builder.Configuration.GetConnectionString("DefaultConnection")
    ));

           builder.Services.AddSession();                                                          //added


            //added->authentication middleware
            builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme).AddCookie(option =>
            {
                option.LoginPath = "/Auth/Login";
                option.ExpireTimeSpan = TimeSpan.FromMinutes(20);

            });

            var app = builder.Build();

            // Configure the HTTP request pipeline.
            if (!app.Environment.IsDevelopment())
            {
                app.UseExceptionHandler("/Home/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseSession();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthorization();

            app.MapControllerRoute(
                name: "default",
                pattern: "{controller=Auth}/{action=Login}/{id?}");

            app.Run();
        }
    }
}
AuthController:-  
       public IActionResult Login()
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (claimUser.Identity.IsAuthenticated)
            {
                return RedirectToAction("Index", "Main");
            }
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Login(Login obj)
        {
            if (ModelState.IsValid)
            {
                var user = _db.Register.FirstOrDefault(u=>u.Email ==obj.Email && u.Password==obj.Password);

                

                if (user != null) 
                {
                    System.Console.WriteLine("Hey");
                    HttpContext.Session.SetString("Email", user.Email);      //setting Session   1)Email
                    HttpContext.Session.SetString("Name", user.Name);           //2) Name
                    string Phone_Number = (user.Phone).ToString();  
                    HttpContext.Session.SetString("Phone", Phone_Number);       //3) Phone Number

                    List<Claim> claims = new List<Claim>()
                    {
                        new Claim(ClaimTypes.NameIdentifier, obj.Email),
                        new Claim("OtherProperties","ExampleRole")
                    };

                    ClaimsIdentity claimsIdentity = new ClaimsIdentity(claims,
                        CookieAuthenticationDefaults.AuthenticationScheme);

                    AuthenticationProperties properties = new AuthenticationProperties()
                    {
                        AllowRefresh = true
                    };

                    await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme,
                        new ClaimsPrincipal(claimsIdentity), properties);

                    return RedirectToAction("Index", "Main");

                }
            }
            ModelState.AddModelError("", "User Not Found");
            return View(obj);
        }
    }       
    MainController:-
    using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authorization;
using Microsoft.EntityFrameworkCore;
using PropDealsNew.Data;
using PropDealsNew.Models;
using Newtonsoft.Json;
using System.Net.Mail;

namespace PropDealsNew.Controllers
{
    [Authorize]
    public class MainController : Controller
    {
       
        public IActionResult Index()
        {
            return View();
        }


    }
}
