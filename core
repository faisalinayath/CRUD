sing System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;

namespace advanced_coding
{
    [Table("tblBook")]
    internal class BookStore
    {
        [Key]
        public int BookId { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Author { get; set; } = string.Empty;
        public string Price { get; set; }
    }
    internal class BookContext : DbContext
    {
        public DbSet<BookStore> Books { get; set; }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            var strConnection = @"Data Source=W-674PY03-1;Initial Catalog=[ConfidentialTraining;Persist Security Info=True;User ID=sa;Password=Password@12345;TrustServerCertificate=True";
            base.OnConfiguring(optionsBuilder);
            optionsBuilder.UseSqlServer(strConnection);
        }
    }
    
    using System;
using System.Collections.Generic;
using System.Linq;

namespace advanced_coding
{
    internal class Program
    {
        private static void Main(string[] args)
        {
            using (var context = new BookContext())
            {
                // Create a new book
                var book = new BookStore
                {
                    Title = "Sample Book",
                    Author = "John Doe",
                    Price = "$9.99"
                };
                context.Books.Add(book);
                context.SaveChanges();
                Console.WriteLine("Book created successfully!");

                // Retrieve all books
                var allBooks = context.Books.ToList();
                Console.WriteLine("All Books:");
                foreach (var b in allBooks)
                {
                    Console.WriteLine($"BookId: {b.BookId}, Title: {b.Title}, Author: {b.Author}, Price: {b.Price}");
                }

                // Update a book
                var bookToUpdate = context.Books.FirstOrDefault(b => b.BookId == 1);
                if (bookToUpdate != null)
                {
                    bookToUpdate.Price = "$14.99";
                    context.SaveChanges();
                    Console.WriteLine("Book updated successfully!");
                }

                // Delete a book
                var bookToDelete = context.Books.FirstOrDefault(b => b.BookId == 1);
                if (bookToDelete != null)
                {
                    context.Books.Remove(bookToDelete);
                    context.SaveChanges();
                    Console.WriteLine("Book deleted successfully!");
                }
            }
        }
    }
}

}
